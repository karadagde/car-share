package carsharing.db;import carsharing.model.entity.Car;import carsharing.model.entity.Company;import carsharing.model.entity.Customer;import java.sql.Connection;import java.sql.DriverManager;import java.sql.Statement;import java.util.ArrayList;import java.util.List;public class DbClient {    private static final String dbUrl = "jdbc:h2:./src/carsharing/db/carsharing";    public void run(String str) {        try (Connection conn = DriverManager.getConnection(dbUrl);             Statement stmt = conn.createStatement()) {            conn.setAutoCommit(true);            stmt.executeUpdate(str);        } catch (Exception se) {            se.printStackTrace();        }    }    public Company select(String query) {        List<Company> companies = selectForList(query);        if (companies.size() == 1) {            return companies.get(0);        } else if (companies.isEmpty()) {            return null;        } else {            throw new RuntimeException("More than one company found");        }    }    public Car selectCar(String query) {        List<Car> cars = selectForCarList(query);        if (cars.size() == 1) {            return cars.get(0);        } else if (cars.isEmpty()) {            return null;        } else {            throw new RuntimeException("More than one company found");        }    }    public Customer selectCustomer(String query) {        List<Customer> customers = selectForCustomerList(query);        if (customers.size() == 1) {            return customers.get(0);        } else if (customers.isEmpty()) {            return null;        } else {            throw new RuntimeException("More than one company found");        }    }    public List<Company> selectForList(String query) {        List<Company> companies = new ArrayList<>();        try (Connection conn = DriverManager.getConnection(dbUrl);             Statement stmt = conn.createStatement();        ) {            stmt.executeQuery(query);            while (stmt.getResultSet().next()) {                companies.add(new Company(stmt.getResultSet().getInt("ID"),                        stmt.getResultSet().getString("NAME")));            }        } catch (Exception se) {            se.printStackTrace();        }        return companies;    }    public List<Car> selectForCarList(String query) {        List<Car> cars = new ArrayList<>();        try (Connection conn = DriverManager.getConnection(dbUrl);             Statement stmt = conn.createStatement();        ) {            stmt.executeQuery(query);            while (stmt.getResultSet().next()) {                cars.add(new Car(stmt.getResultSet().getInt("ID"),                        stmt.getResultSet().getString("NAME"),                        stmt.getResultSet().getInt("COMPANY_ID")));            }        } catch (Exception se) {            se.printStackTrace();        }        return cars;    }    public List<Customer> selectForCustomerList(String query) {        List<Customer> customers = new ArrayList<>();        try (Connection conn = DriverManager.getConnection(dbUrl);             Statement stmt = conn.createStatement();        ) {            stmt.executeQuery(query);            while (stmt.getResultSet().next()) {                customers.add(new Customer(stmt.getResultSet().getInt("ID"),                        stmt.getResultSet().getString("NAME"),                        stmt.getResultSet().getInt("RENTED_CAR_ID")));            }        } catch (Exception se) {            se.printStackTrace();        }        return customers;    }}